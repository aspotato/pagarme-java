package br.com.aspotato.pagarme.services;

import br.com.aspotato.pagarme.exceptions.InvalidFormatException;
import br.com.aspotato.pagarme.exceptions.SubmitException;
import com.mashape.unirest.http.HttpResponse;
import com.mashape.unirest.http.JsonNode;
import com.mashape.unirest.http.Unirest;
import com.mashape.unirest.request.HttpRequestWithBody;
import br.com.aspotato.pagarme.models.Card;
import br.com.aspotato.pagarme.models.Key;
import br.com.aspotato.pagarme.utils.PagarMeProvider;
import br.com.aspotato.pagarme.utils.PagarMeUtil;
import com.mashape.unirest.http.exceptions.UnirestException;
import java.text.ParseException;
import org.json.JSONException;
import org.json.JSONObject;

/**
 * Servico para manipulacao de dados de cartoes
 * @author jeffprestes
 */
public class CardService extends BasicService {

//TODO: Retornar Exceptions especificas para que a aplicacao utilitaria 
//      possa fazer o tratamento ideal
	private PagarMeProvider instance = PagarMeProvider.getInstance();
        private final String RESOURCE = "cards";

	public HttpResponse<JsonNode> save(Card card) throws Exception {
		HttpResponse<JsonNode> jsonResponse = null;
		if(validateFiels(card)){
			
			HttpRequestWithBody request =  Unirest.post(instance.getUrl() + "1/cards")
					.header("accept", "application/json")
					.queryString("api_key", instance.getApi_key());	

			jsonResponse = request.asJson();
		}

		return jsonResponse;
	}
        
        public Card getCard(String id) throws   UnirestException, 
                                                IllegalAccessException, 
                                                InvalidFormatException, 
                                                SubmitException, 
                                                InstantiationException, 
                                                JSONException, 
                                                ParseException  {
            return (Card) this.getDataFromRemoteResouceWithId(Card.class, RESOURCE, id);
        }
        
        /**
         * Saves a new card
         * @param card
         * @return Card object stored by Pagar.me
         * @throws Exception 
         */
        public Card putNewCard(Card cardRequest) throws Exception  {
            
            JSONObject obj = this.postToRemoteResource(RESOURCE, cardRequest);
            Card cardResponse = (Card) PagarMeUtil.convertJsonToObject(Card.class, obj);
            return cardResponse;
            
        }
        
        /**
         * Generates public key to be used to encrypt Credit Card data
         * @return public key generated by Pagar.me
         * @throws Exception 
         */
        public Key generateCardHash() throws Exception {
            HttpResponse<JsonNode> jsonResponse = Unirest.get(instance.getBaseUrl() + "transactions/card_hash_key")
                            .header("accept", "application/json")
                            .queryString("encryption_key", instance.getEncryptionKey())
                            .asJson();
            JSONObject resultObject = jsonResponse.getBody().getObject();
            
            this.checkErrors(resultObject);
            return (Key) PagarMeUtil.convertJsonToObject(Key.class, resultObject);
            
        }

}
